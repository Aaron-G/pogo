#!/usr/local/bin/perl -w

# Copyright (c) 2010, Yahoo! Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use File::Temp qw();
use Log::Log4perl qw(:easy);

BEGIN
{
  File::Temp->safe_level(File::Temp::HIGH);
}

my $opts = {
  expect_wrapper => "/usr/local/libexec/pogo/pogo-pw",
  worker_key     => "/usr/local/etc/pogo/worker.key",
  scp_options    => [
    qw(-q -o RSAAuthentication=no -o PubkeyAuthentication=no -o StrictHostKeyChecking=no -o LogLevel=error -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null)
  ],
  ssh_options => [
    qw(-o RSAAuthentication=no -o PubkeyAuthentication=no -o StrictHostKeyChecking=no -o LogLevel=error -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null -t)
  ],
  command_prefix => [],
};

my $remote_env = { PATH => '/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin', };

sub remote_env
{
  my @env = qw(env);
  push @env, map { $_ . '=' . $remote_env->{$_} } sort keys %{$remote_env};
  return \@env;
}

sub execute
{
  my $args = shift;
  my @command = ( $opts->{expect_wrapper}, @_ );

  my ( $writer, $reader ) = ( new IO::Handle, new IO::Handle );
  my $pid;
  eval { $pid = open3( $writer, $reader, undef, @command ); };
  if ($@)
  {
    LOGDIE "Error: $@";
  }

  # Send timeout
  $writer->print( $args->{timeout}, "\n" );

  # Send password
  $writer->printf( "%s\n",
    pack( q{u}, $opts->{private_key}->decrypt( decode_base64( $args->{password} ) ) ) );

  # Send package passwords
  while ( my ( $pkg, $password ) = each( %{ $args->{pkg_passwords} } ) )
  {
    $writer->printf( "%s=%s\n", $pkg,
      pack( q{u}, $opts->{private_key}->decrypt( decode_base64($password) ) ) );
  }
  $writer->close;

  # Copy remote command's output to ours.
  while ( defined( my $line = $reader->getline() ) )
  {
    STDOUT->print($line);
  }

  # Reap child and return its exit status to our caller.
  my $p = waitpid( $pid, 0 );
  return WEXITSTATUS($?);
}

sub main
{
  my ( $args, $tmpfile, $exit_status );

  STDERR->autoflush(1);
  STDOUT->autoflush(1);

  $ENV{"POGO_WORKER_CONFIG_FILE"} ||= "/home/y/conf/pogo_worker/worker.conf";

  # Override default option values with those in configuration file.
  if ( -r $ENV{"POGO_WORKER_CONFIG_FILE"} )
  {
    $opts = merge( $opts, YAML::LoadFile( $ENV{"POGO_WORKER_CONFIG_FILE"} ) );
  }

  if ( defined $opts->{rexec_log4perl} && -r $opts->{rexec_log4perl} )
  {
    Log::Log4perl::init( $opts->{log4perl} );
  }
  if ( defined $opts->{loglevel} )
  {
    Log::Log4perl::get_logger()->level( $opts->{loglevel} );
  }

  GetOptions(
    'e|expect-wrapper=s' => sub { $opts->{expect_wrapper} = $_[1] },
    'k|ssl-key=s'        => sub { $opts->{worker_key}     = $_[1] },
  );

  # Sanity checks
  unless ( -x $opts->{expect_wrapper} )
  {
    LOGDIE "Can't execute " . $opts->{expect_wrapper};
  }

  $opts->{private_key} =
       Crypt::OpenSSL::RSA->new_private_key( scalar read_file $opts->{worker_key} )
    || LOGDIE "unable to load worker private key!";

  # Read JSON-encoded args from STDIN.
  $args = decode_json( STDIN->getline() );

  # Check for required arguments
  for (qw(job_id command user run_as password pkg_passwords host timeout))
  {
    unless ( defined $args->{$_} )
    {
      LOGDIE "Missing required argument $_\n";
    }
  }

  # insert POGO_JOB_ID into the remote environment for bz2999820
  $remote_env->{POGO_JOB_ID} = $args->{job_id};

  if ( ${ $args->{command} }[0] =~ /^POGOATTACHMENT!(.+)/s )
  {

    # Initial step: copy the attachment to our destination host.
    my $attachment = decode_base64($1);
    $tmpfile = new File::Temp();
    chmod( 0700, $tmpfile );
    $tmpfile->print($attachment);
    $tmpfile->close;
    execute( $args, "scp", @{ $opts->{scp_options} },
      $tmpfile, $args->{user} . "@" . $args->{host} . ":" . $tmpfile )
      and LOGDIE "scp failed";

    # $args->{command} = [$tmpfile->filename];
    # This would be more convenient:
    $args->{command}->[0] = $tmpfile->filename;

    # that way we can pass args to our script
  }
  elsif ( ( ${ $args->{command} }[0] =~ /\/yinst$/ ) or ( ${ $args->{command} }[0] eq "yinst" ) )
  {

    # Convert command "yinst CMD" to "yinst CMD -noautopw"
    if ( scalar @{ $args->{command} } > 1 )
    {
      my @tmp;
      push @tmp, shift @{ $args->{command} };
      push @tmp, shift @{ $args->{command} };
      unshift( @{ $args->{command} }, "-noautopw" );
      unshift( @{ $args->{command} }, @tmp );
    }
  }

  # Prepend "sudo -u <user>" if we are running as someone else
  if ( $args->{run_as} ne $args->{user} )
  {
    unshift( @{ $args->{command} }, "sudo", "-u", $args->{run_as} );
  }

  # Execute the provided command
  $exit_status = execute(
    $args, "ssh", @{ $opts->{ssh_options} },
    "--",
    $args->{user} . "@" . $args->{host},
    @{ remote_env() },
    @{ $opts->{command_prefix} },
    @{ $args->{command} }
  );

  # Remove the copied attachment on the target host, if necessary.
  if ($tmpfile)
  {
    execute(
      $args, "ssh", @{ $opts->{ssh_options} },
      "--", $args->{user} . "@" . $args->{host},
      "rm", $tmpfile
    );
  }

  return $exit_status;
}

exit main();

1;

=pod

=head1 NAME

  CLASSNAME - SHORT DESCRIPTION

=head1 SYNOPSIS

CODE GOES HERE

=head1 DESCRIPTION

LONG_DESCRIPTION

=head1 METHODS

B<methodexample>

=over 2

methoddescription

=back

=head1 SEE ALSO

L<Pogo::Dispatcher>

=head1 COPYRIGHT

Apache 2.0

=head1 AUTHORS

  Andrew Sloane <asloane@yahoo-inc.com>
  Michael Fischer <mfischer@yahoo-inc.com>
  Nicholas Harteau <nrh@yahoo-inc.com>
  Nick Purvis <nep@yahoo-inc.com>
  Robert Phan <rphan@yahoo-inc.com>

=cut
# vim:syn=perl:sw=2:ts=2:sts=2:et:fdm=marker
