[%# vim:ft=html
%]
[% INCLUDE _page_header.tt %]

<table cellpadding="0" cellspacing="0" border="0" class="jobinfo">
  <tr>
    <td class="label">Pogo&nbsp;ID</td>
    <td><span class="pogo-id"><a href="[% base_cgi_path %][% jobid %]">[% jobid %]</a></span><span id="jobhalt"></span></td>
  <tr>
  <tr>
    <td class="label">User</td>
    <td>[% jobinfo.user %]</td>
  </tr>
  <tr>
    <td class="label">Command</td>
    <td><span class="command">[% jobinfo.command %]</span></td>
  </tr>
  [% IF jobinfo.invoked_as.defined %]
  <tr>
    <td class="label">Invoked&nbsp;As</td>
    <td><span class="command">[% jobinfo.invoked_as %]</span></td>
  </tr>
  [% END %]
  [% IF jobinfo.requesthost.defined %]
  <tr>
    <td class="label">Request&nbsp;Host</td>
    <td>[% jobinfo.requesthost %]</td>
  </tr>
  [% END %]
  [% IF jobinfo.retry.defined %]
  <tr>
    <td class="label">Retry</td>
    <td>[% jobinfo.retry %]</td>
  </tr>
  [% END %]
  [% IF jobinfo.job_timeout.defined %]
  <tr>
    <td class="label">Job&nbsp;Timeout</td>
    <td>[% jobinfo.job_timeout %]</td>
  </tr>
  [% END %]
  <tr>
    <td class="label">Start&nbsp;Time</td>
    <td><span id="start_time"><span></td>
  </tr>
  <tr>
    <td class="label">End&nbsp;Time</td>
    <td><span id="end_time"><span></td>
  </tr>
  <tr>
    <td class="label">Job&nbsp;State</td>
    <td><span id="job_state"></span><span id="job_refresh"></span></td>
  </tr>
  <tr>
    <td colspan="2"><span id="job_summary"></span></td>
  </tr>
</table>

<div id="log" style="position: absolute; top: 40px; left: 0px; width: 30%; margin-left: 68%; border: 1px solid black; font-size: 8pt; height: 250px; overflow: auto; background-color: #fff; display: none;"></div>

<div id="timeline">
  <span>Loading...</span>
</div>

<script type="text/javascript" src="http://yui.yahooapis.com/3.0.0/build/yui/yui-min.js"></script>
<script type="text/javascript" src="/static/sprintf.js"></script>
<script type="text/javascript">
var pogoDataSource;
var pogo_id   = "[% jobid %]";
var snapindex = 0;
var state     = {};
var timer     = null;
var timeout   = 15000;
var mapid     = 0; // gotta be a global or safari fails
var show_log  = "[% show_logger %]";
var max_logentries = 500;  // only load this many records at a time from the log
var stateOrder = { failed:1, unreachable:2, deadlocked:3, ready:4, running:4, waiting:5, unseen:5, finished:6 };
var hostCount = 0; // count of hosts in job
var maxAutoUpdateHosts = 500; // maximum number of hosts before auto-updating is disabled
var autoUpdate = true; // whether or not we're automatically updating
var start_time = parseFloat('[% jobinfo.start_time %]') * 1000; // job start time
var job_timeout = parseInt('[% jobinfo.job_timeout %]') * 1000; // job timeout
var can_retry = false; // whether or not hosts can be retried
var retry_ids = {}; // which hosts have pending retry requests
var sortFuncs = {
  timeline: function( a, b ) {
    if ( state[ a ].start && state[ b ].start ) {
      return ( state[ b ].start - state[ a ].start );
    } else {
      return ( state[ a ].start ) ? 1 : -1;
    }
  },
  host: function( a, b ) {
    // determine farm
    var a_farm  = get_farm( state[ a ].host );
    var b_farm  = get_farm( state[ b ].host );
    // determine farmnumber
    var a_fnum  = farm_to_number( a_farm );
    var b_fnum  = farm_to_number( b_farm );
    // determine colos
    var a_colo  = farm_to_colo( a_farm );
    var b_colo  = farm_to_colo( b_farm );

    return ( a_colo != b_colo ) ? ( a_colo < b_colo ) ? -1 : 1 :
           ( a_fnum != b_fnum ) ? ( a_fnum < b_fnum ) ? -1 : 1 :
           ( state[ a ].host < state[ b ].host ) ? -1 : 1;
    // the old sort, for posterity
    //return ( state[ a ].host < state[ b ].host ) ? -1 : 1;
  },
  datestart: function( a, b ) {
    if ( state[ a ].start !== undefined && state[ b ].start !== undefined )
    {
      return ( state[ a ].start - state[ b ].start );
    }
    else
    {
      return ( state[ a ].start === undefined ) ? -1 : 1;
    }
  },
  dateend: function( a, b ) {
    if ( state[ a ].end !== undefined && state[ b ].end !== undefined )
    {
      return ( state[ a ].end - state[ b ].end );
    }
    else
    {
      return ( state[ a ].end === undefined ) ? -1 : 1;
    }
  },
  hoststate: function( a, b ) {
    var sdiff = stateOrder[ state[ a ].state ] - stateOrder[ state[ b ].state ];
    if(sdiff == 0) return sortFuncs.host(a,b);
    return sdiff > 0 ? 1 : -1;
  },
  exitstatus: function( a, b ) {
    if ( state[ a ].exitstatus !== undefined && state[ b ].exitstatus !== undefined )
    {
      return ( state[ a ].exitstatus - state[ b ].exitstatus );
    }
    else
    {
      return ( state[ a ].exitstatus === undefined ) ? -1 : 1;
    }
  },
  duration: function( a, b ) {
    if ( state[ a ].duration !== undefined && state[ b ].duration !== undefined )
    {
      return ( state[ a ].duration - state[ b ].duration );
    }
    else
    {
      return ( state[ a ].duration === undefined ) ? -1 : 1;
    }
  }
};
var sortKey   = 'timeline';
var sortDir   = 0;

var Y = YUI().use( 'datasource', 'json', 'dump', 'node', function( Y ) {
  // toggle the logger
  if ( show_log == "1" )
  {
    Y.one( '#log' ).setStyle( 'display', 'block' );
  }
  // disable retry if our job timeout has expired
  var d_exp = new Date(start_time + job_timeout);
  var d_now = new Date();
  can_retry = (d_exp > d_now);
  // fetch job status and render
  pogoDataSource = new Y.DataSource.Get( { source: "[% pogo_api %]?" } );
  status_update();
} );

function pogorpc( r, c ) {
  var q = 'r=' + Y.JSON.stringify( r );
  q = q + '&c=' + c;

  pogoDataSource.sendRequest( q );
}

function status_update(obj) {
  clearTimeout(timer);

  // no object, send the request
  if (!obj)
  {
    Y.one('#loading').setStyle('display', 'block');
    logger('Fetching jobsnapshot for index ' + snapindex);
    pogorpc(["jobsnapshot",pogo_id,snapindex], "status_update");
    return;
  }

  // check the response status
  var header  = obj[0];
  var data    = obj[1];
  if (header.status != 'OK')
  {
    var errmsg = (header.errmsg) ? header.errmsg : Y.dump(data);
    Y.one('#loading').setStyle('display', 'none');
    Y.one('#timeline').set('innerHTML','Error from Pogo server: ' + errmsg);
    alert('Error from Pogo server: ' + errmsg);
    return;
  }

  // update the snapindex
  snapindex = data[0];

  // parse the snapshot
  var tmp = Y.JSON.parse(data[1]);
  logger(Y.dump(tmp));
  for (var i in tmp)
  {
    if (!state[i])
    {
      state[i]={};
      // count the number of hosts in the job
      if (i != 'job')
      {
        hostCount++;
      }
    }
    for (var j in tmp[i])
    {
      if (j == 'runs' && state[i].runs)
      {
        // if the entry does not contain an 's' property, we will merge it
        // otherwise we will append
        if (!tmp[i].runs[0].s)
        {
          for (var k in tmp[i].runs[0])
          {
            state[i].runs[(state[i].runs.length - 1)][k] = tmp[i].runs[0][k];
          }
          tmp[i].runs.shift();
        }
        // everything else just gets appended
        while (tmp[i].runs.length)
        {
          state[i].runs.push(tmp[i].runs.shift());
        }
      }
      else
      {
        state[i][j] = tmp[i][j];
      }
    }
  }

  // update the job halt control
  render_jobhalt();

  // update the job refresh control
  render_jobrefresh();

  // render the state
  render_state();

  // hide the loading thinger
  Y.one('#loading').setStyle('display', 'none');

  // come back later or don't
  if (timeout && autoUpdate)
  {
    timer = setTimeout(function() { status_update(); }, timeout);
  }
}

var stateColors = {
  'failed':      [255,  28,   0],
  'finished':    [  0, 255, 127],
  'unreachable': [153, 101,  66],
  'deadlocked':  [204,  94,  20],
  'ready':       [ 36, 204,  20],
  'running':     [205, 255,  25],
  'waiting':     [ 20,  97, 204]
};

function render_jobhalt() {
  var control = Y.one('#jobhalt');
  if ( state && state.job && state.job.state == 'running' )
  {
    control.set('innerHTML',' - <a href="javascript:do_halt();">Halt Job</a>');
  }
  else
  {
    control.set('innerHTML','');
  }
}

function render_jobrefresh() {
  var control = Y.one('#job_refresh_control');
  if (! control)
  {
    // if the hostCount exceeds this threshold we will automatically
    // disable auto-refresh
    autoUpdate = (hostCount <= maxAutoUpdateHosts);
    // add our control content
    Y.one('#job_refresh').append('-<input type="checkbox" id="job_refresh_control" name="job_refresh_control"' +
                                  ( ( autoUpdate ) ? ' checked' : '' ) + '>' +
                                  '<label for="job_refresh_control" style="cursor: pointer;">Auto-Update</label>');
    // set up our click handler
    control = Y.one('#job_refresh_control');
    control.on('change', function() {
      autoUpdate = control.get('checked');
      if (autoUpdate) {
        status_update();
      }
      else
      {
        clearTimeout(timer);
      }
    });
  }
}

function render_state() {
  var hosts     = [];
  var maxWorm   = 1;
  var jobStart  = null;
  var jobEnd    = null;
  var now       = new Date().getTime();
  var summary   = { done: 0, total: 0 };
  var retries   = 0;
  var tmpid     = 0;
  var ho        = new Array();
  var useMap    = true;

  /****
   * Job 411
   ***/
  var job = state.job;
  // start/end time(s)
  if (job.runs)
  {
    for (var i = 0; i < job.runs.length; i++)
    {
      // the first start time will be our job start time
      if (!jobStart && job.runs[i].s)
      {
        jobStart = Math.round( job.runs[i].s * 1000 );
      }
      // the last end time will be our job end time, if it exists
      if (i == (job.runs.length - 1) && job.runs[i].e)
      {
        jobEnd = Math.round( job.runs[i].e * 1000 );
      }
    }
  }
  if (jobStart)
  {
    var d = new Date(jobStart);
    Y.one('#start_time').set('innerHTML',d);
  }
  else
  {
    Y.one('#start_time').set('innerHTML','-');
  }
  if (jobEnd)
  {
    var d = new Date(jobEnd);
    var str = d;
    if (jobStart)
    {
      str = str + ' (' + date_diff(d, new Date(jobStart)) + ')';
    }
    Y.one('#end_time').set('innerHTML',str);
  }
  else
  {
    Y.one('#end_time').set('innerHTML','-');
  }
  // job state
  if (job.state)
  {
    Y.one('#job_state').set('innerHTML',job.state + ': ' + job.msg);
  }
  else
  {
    Y.one('#job_state').set('innerHTML','-');
  }
  // maximum worm size for scaling
  if (jobStart && jobEnd)
  {
    maxWorm = Math.round((jobEnd - jobStart) / 1000);
    // we're done
    timeout = 0;
  }
  else
  {
    // if there is no job end time, the job is still running!
    maxWorm = Math.round((now - jobStart) / 1000);
    // 5s timeout
    timeout = 5000;
  }
  // size of worm timeline
  var wormMaxWidth  = 500;
  var wormMaxHeight = 10;
  var wormMinWidth  = 2;
  var wormScale     = wormMaxWidth / maxWorm;

  /****
   * Hosts 411
   ***/
  for (var i in state)
  {
    if (i != 'job')
    {
      // add the host to our hostlist for sorting
      hosts.push(i);
      // determine start/end/exitstatus for sorting
      var r = state[i].runs;
      // grab the first start time if available
      state[i].start      = (r && r.length && r[0].s) ? Math.round(r[0].s * 1000) : undefined;
      state[i].end        = (r && r.length && r[r.length - 1].e) ? Math.round(r[r.length - 1].e * 1000) : undefined;
      state[i].exitstatus = (r && r.length && r[r.length - 1].x) ? r[r.length - 1].x : undefined;
      state[i].duration   = (state[i].start && state[i].end) ? state[i].end - state[i].start : undefined;
    }
  }

  // sort the hosts
  hosts.sort( sortFuncs[ sortKey ] );
  if ( sortDir )
  {
    hosts.reverse();
  }

  var table   = document.createElement('TABLE');
  var tbody   = table.appendChild(document.createElement('TBODY'));
  var tr      = document.createElement('TR');
  var th      = document.createElement('TH');
  var td      = document.createElement('TD');
  var canvas  = document.createElement('CANVAS');
  var div     = document.createElement('DIV');
  var map     = document.createElement('MAP');
  var area    = document.createElement('AREA');
  var img     = document.createElement('IMG');

  canvas.width  = wormMaxWidth;
  canvas.height = wormMaxHeight;

  table.cellPadding=1;
  table.cellSpacing=1;
  table.border=1;
  var trHead = tbody.appendChild(tr.cloneNode(false));
  trHead.appendChild(th.cloneNode(false));
  trHead.lastChild.innerHTML = '<a href="javascript:resort(\'host\');">Host</a>';
  trHead.appendChild(th.cloneNode(false));
  trHead.lastChild.innerHTML = '<a href="javascript:resort(\'hoststate\');">State</a>';
  trHead.appendChild(th.cloneNode(false));
  trHead.lastChild.innerHTML = '<a href="javascript:resort(\'exitstatus\');">RC</a>';
  trHead.appendChild(th.cloneNode(false));
  trHead.lastChild.innerHTML = '<a href="javascript:resort(\'datestart\');">Time started</a>';
  trHead.appendChild(th.cloneNode(false));
  trHead.lastChild.innerHTML = '<a href="javascript:resort(\'duration\');">Duration</a>';
  trHead.appendChild(th.cloneNode(false));
  trHead.lastChild.innerHTML = '<a href="javascript:resort(\'timeline\');">Timeline</a>';

  var t = document.getElementById('timeline');
  while (t.childNodes.length)
  {
    t.removeChild(t.childNodes[0]);
  }
  // firefox is slow, so disable imagemaps when the job contains >1k hosts
  useMap = ( hosts.length > 1000 && /Firefox/.test(navigator.userAgent) ) ? false : true;
  for (var h in hosts)
  {
    var host = state[hosts[h]];

    // update the summary
    summary.total++;
    if (host.state != 'waiting' && host.state != 'running')
    {
      summary.done++;
    }
    if(!summary[host.state])
    {
      summary[host.state]=0;
    }
    summary[host.state]++;

    var row = tbody.appendChild(tr.cloneNode(false));

    // hostname/output
    var tdHost = row.appendChild(td.cloneNode(false));
    var hasOutput = false;
    var totalRuns = 0;
    if (host.runs)
    {
      for (var j=0; j < host.runs.length; j++)
      {
        if (host.runs[j].o)
        {
          hasOutput = true;
        }
        if (host.runs[j].s)
        {
          totalRuns++;
        }
      }
    }
    if (hasOutput)
    {
      tdHost.innerHTML = '<a target="' +
                          gen_target() +
                          '" href="[% base_cgi_path %]output?pogoid=[% jobid %]&host=' + host.host + '">' + host.host + '</a>';
    }
    else
    {
      tdHost.appendChild(document.createTextNode(host.host));
    }
    if (totalRuns > 1)
    {
      retries += (totalRuns - 1);
    }

    // state
    var wormColor = stateColors[host.state] || [255,255,255];
    var tdState = row.appendChild(td.cloneNode(false));
    tdState.style.backgroundColor = 'rgb('+wormColor[0]+','+wormColor[1]+','+wormColor[2]+')';
    tdState.appendChild(document.createTextNode(host.state));

    // exitstatus
    var tdExit = row.appendChild(td.cloneNode(false));
    if (host.exitstatus)
    {
      tdExit.appendChild(document.createTextNode(host.exitstatus));
    }
    else
    {
      tdExit.appendChild(document.createTextNode('-'));
    }

    // start date
    var tdStart = row.appendChild(td.cloneNode(false));
    if (host.start)
    {
      var ds = new Date(host.start);
      tdStart.appendChild(document.createTextNode(format_date(ds) + '(' + date_diff(ds, new Date(jobStart)) + ')'));
    }
    else
    {
      tdStart.appendChild(document.createTextNode('-'));
    }

    // duration
    var tdDur = row.appendChild(td.cloneNode(false));
    if (host.start && host.end)
    {
      tdDur.appendChild(document.createTextNode(date_diff(new Date(host.end), new Date(host.start))));
    }
    else if (host.state == 'running')
    {
      tdDur.appendChild(document.createTextNode(date_diff(new Date(), new Date(host.start))));
    }
    else
    {
      tdDur.appendChild(document.createTextNode('-'));
    }

    // timeline
    var tdTime = row.appendChild(td.cloneNode(false));
    if (host.state == 'ready' || host.state == 'waiting' ||
        host.state == 'unreachable' || host.state == 'deadlocked')
    {
      tdTime.innerHTML = '<span class="timeline-message">' + host.msg + '</span>';
    }
    else if (host.state == 'failed' && can_retry)
    {
      var className = 'timeline-error';
      var isFatal   = true;
      if (/exited with status \d+/.test(host.msg))
      {
        // if the command exited with a non-zero status, the error is not fatal
        // and we can retry
        className = 'timeline-exterror';
        isFatal   = false;
      }
      tdTime.innerHTML = '<span class="' + className + '">' + host.msg + '</span>' +
        ( ( isFatal ) ? '' : ' - <span id="retry_' + tmpid + '"><a href="javascript:do_retry(\'' + host.host + '\',' + tmpid + ');">retry</a></span>' );
      tmpid++;
    }
    else
    {
      tdTime.style.verticalAlign = 'middle';

      // we need to wrap everything into an outer div, otherwise the browser will
      // reserve space below the canvas for the overlay div, even though we are
      // positioning it on top of the canvas.. css rules!
      var divTime = tdTime.appendChild(div.cloneNode(false));
      divTime.style.width = wormMaxWidth + 'px';
      divTime.style.height = wormMaxHeight + 'px';
      divTime.style.margin = '0px';
      divTime.style.padding = '0px';
      divTime.style.overflow = 'visible';

      var c   = divTime.appendChild(canvas.cloneNode(true));
      var ctx = c.getContext('2d');
      if (ctx && host.runs && host.runs.length)
      {
        if (useMap)
        {
          // add an overlay container for our imagemap
          var cDiv = divTime.appendChild(div.cloneNode(false));
          cDiv.style.position = 'relative';
          cDiv.style.width = wormMaxWidth + 'px';
          cDiv.style.height = wormMaxHeight + 'px';
          cDiv.style.top = '-' + wormMaxHeight + 'px';
          cDiv.style.left = '0px';
          cDiv.style.margin = '0px';
          cDiv.style.padding = '0px';

          // add our map
          var cMap = cDiv.appendChild(map.cloneNode(false));
          cMap.name = 'map' + ( ++mapid );

          // add our image
          var cImg = cDiv.appendChild(img.cloneNode(false));
          cImg.src = '[% base_html_path %]/static/blank.gif';
          cImg.width = wormMaxWidth;
          cImg.height = wormMaxHeight;
          cImg.border = 0;
          cImg.useMap = '#' + cMap.name;
        }

        for (var j=0; j < host.runs.length; j++)
        {
          var r = host.runs[j];
          if (r.s)
          {
            // start/end times: if the end time does not exist, we will check to see if the job is
            // running by looking for a jobEnd value. if it is not present, we will default to 1s
            // otherwise we will use the current time
            var startTs = r.s;
            var endTs   = (r.e) ? r.e : (jobEnd) ? (r.s+1) : Math.round(now / 1000);
            var jobTs   = (jobStart) ? Math.round(jobStart / 1000) : r.s;
            var exit    = (r.x) ? r.x : -1;

            // worm
            var wormOffset  = Math.round((startTs - jobTs) * wormScale);
            var wormSize    = Math.round((endTs - startTs) * wormScale);
            wormSize = (wormSize > wormMinWidth) ? wormSize : wormMinWidth;

            // colors
            var myColor   = wormColor;
            var adjColor  = [];
            if (exit > 0)
            {
              myColor = stateColors['failed'];
            }
            else if (exit < 0)
            {
              myColor = stateColors['running'];
            }
            for (var k in myColor)
            {
              adjColor[k] = Math.round(myColor[k] - myColor[k] * (wormSize / maxWorm));
            }

            // render it
            ctx.strokeStyle = 'rgb('+myColor[0]+','+myColor[1]+','+myColor[2]+')';
            ctx.fillStyle   = 'rgb('+adjColor[0]+','+adjColor[1]+','+adjColor[2]+')';
            ctx.fillRect(wormOffset,0,wormSize,wormMaxHeight);
            ctx.strokeRect(wormOffset,0,wormSize,wormMaxHeight);

            if (useMap)
            {
              // add this entry to our map
              var cArea = cMap.appendChild(area.cloneNode(false));
              cArea.shape = 'rect';
              cArea.coords = wormOffset + ',' + 0 + ',' + ( wormOffset + wormSize ) + ',' + wormMaxHeight;
              cArea.href = '[% base_cgi_path %]output?pogoid=[% jobid %]&host=' + escape(host.host) + '#run' + (j + 1);
              cArea.target = gen_target();
            }
          }
        }
      }
    }
  }
  t.appendChild(table);

  /****
   * Summary 411
   ***/
  if (summary.total && summary.total != '0')
  {
    var tmp = 'done to ' + summary.done + '/' + summary.total;
    var p   = {};
    var s   = [];

    // determine the percentages
    for (var i in summary)
    {
      if (i != 'done' && i != 'total' && i != 'waiting')
      {
        p[i] = 100 * (summary[i] / summary.total);
        s.push(i);
      }
    }
    // sort by percentage
    s.sort( function(a, b) {
        return (p[a] < p[b]) ? 1 : (p[a] > p[b]) ? -1 : 0;
    } );
    // append the output
    for (var i = 0; i < s.length; i++)
    {
      tmp = tmp + ', ' + sprintf("%.02f", p[s[i]]) + '% (' + summary[s[i]] + ') ' + s[i];
    }
    // append the retries
    tmp = tmp + ', ' + retries + ' retries';

    Y.one('#job_summary').set('innerHTML', tmp);
  }
  else
  {
    Y.one('#job_summary').set('innerHTML','No host data available');
  }
}

function resort( how ) {
  if ( sortKey == how )
  {
    sortDir = ( sortDir ) ? 0 : 1;
  }
  else
  {
    sortKey = how;
    sortDir = 0;
  }
  logger( 'Sorting by: ' + how + ', dir: ' + sortDir );
  render_state();
}

function format_date( d ) {
  return sprintf( "%02d:%02d:%02d",
                      d.getHours(),
                      d.getMinutes(),
                      d.getSeconds() );
}

function gen_target() {
  return '_t' + new Date().getTime() + '_' + parseInt( Math.random() * 1000 );
}

function date_diff( d1, d2 ) {
  var ret = '';

  var os = Math.round( ( d1.getTime() - d2.getTime() ) / 1000 );

  if ( os >= 0 )
  {
    ret = ret + '+';
  }
  else
  {
    ret = ret + '-';
  }
  os = Math.abs( os );

  var hours   = 0;
  var minutes = 0;
  var seconds = 0;

  if ( os >= 3600 )
  {
    hours = Math.floor( os / 3600 );
    os -= ( 3600 * hours );
  }
  if ( os >= 60 )
  {
    minutes = Math.floor( os / 60 );
    os -= ( 60 * minutes );
  }
  seconds = os;

  if ( hours )
  {
    ret = ret + hours + 'h';
  }
  if ( minutes )
  {
    ret = ret + minutes + 'm';
  }
  ret = ret + os + 's';

  return ret;
}

function logger( m ) {
  var logNode = Y.one( '#log' );
  logNode.appendChild( document.createElement( 'HR' ) );
  logNode.appendChild( document.createTextNode( m ) );
}

function farm_to_number( farm )
{
  var tmp = farm.split( '.' );
  return tmp[ 0 ];
}

function farm_to_colo( farm )
{
  var tmp = farm.split( '.' );
  return tmp[ 1 ];
}

function get_farm( host )
{
  return get_farm_number( host ) + '.' + get_farm_colo( host );
}

function get_farm_number( host )
{
  var farm  = '';
  var res   = /^[a-z]+(\d+)\d\d\./i.exec( host );
  if ( res && res.length )
  {
    farm = res[ 1 ];
  }
  return farm;
}

function get_farm_colo( host )
{
  var colo  = '';
  var res   = /\.mail\.([^\.]+)\.yahoo\./i.exec( host );
  if ( res && res.length )
  {
    colo = res[ 1 ];
  }
  return colo;
}

function do_halt()
{
  Y.one('#jobhalt').set('innerHTML',' - <i>(requesting halt...)</i>');
  pogorpc( ["jobhalt",pogo_id], "i" );
  clearTimeout( timer );
  timer = setTimeout( function() { status_update(); }, 1000 );
}

// this is just here to ignore return value from an rpc
function i() {}

function do_retry( host, id )
{
  Y.one( '#retry_' + id ).set( 'innerHTML', "<i>(requesting retry for " + host + "...)</i>" );
  retry_ids[ id ] = 1;
  pogorpc( [ 'jobretry', pogo_id, host ], 'jobretry_handler' );
  clearTimeout( timer );
  timer = setTimeout( function() { status_update(); }, 1000 );
}

function jobretry_handler( obj ) {
  var header = obj[0];
  if ( header.status && header.status == 'ERROR' )
  {
    for ( var id in retry_ids )
    {
      delete retry_ids[ id ];
      Y.one( '#retry_' + id ).set( 'innerHTML', '<i>(retry failed: ' + header.errmsg + ')</i>' );
    }
  }
}
</script>

[% INCLUDE _page_footer.tt %]

